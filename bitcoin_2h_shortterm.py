# -*- coding: utf-8 -*-
"""bitcoin_2h_shortterm.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FvQf7YMS7zzjPlLyYkjxas1vCk3Nt0-k
"""

import yfinance as yf
import pandas as pd
import numpy as np

from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
from datetime import datetime, timedelta

# دریافت داده‌های بیت‌کوین از یاهو فایننس
def get_bitcoin_data():
    btc = yf.Ticker("BTC-USD")
    data = btc.history(period="2y", interval="1h")
    return data['Close']

# آماده‌سازی داده‌ها برای مدل LSTM
def prepare_data(data, time_steps=12):
    scaler = MinMaxScaler()
    scaled_data = scaler.fit_transform(data.values.reshape(-1, 1))

    X, y = [], []
    for i in range(len(scaled_data) - time_steps):
        X.append(scaled_data[i:i+time_steps])
        y.append(scaled_data[i+time_steps])

    return np.array(X), np.array(y), scaler

# ساخت مدل LSTM
def create_model(time_steps):
    model = Sequential([
        LSTM(units=50, return_sequences=True, input_shape=(time_steps, 1)),
        Dropout(0.2),
        LSTM(units=50),
        Dropout(0.2),
        Dense(1)])
    model.compile(optimizer='adam', loss='mse')
    return model

# پیش‌بینی قیمت
def predict_price(model, data, scaler, time_steps=12):
    last_sequence = data[-time_steps:].values.reshape(-1, 1)
    last_sequence = scaler.transform(last_sequence)
    last_sequence = last_sequence.reshape(1, time_steps, 1)

    predicted_scaled = model.predict(last_sequence)
    predicted_price = scaler.inverse_transform(predicted_scaled)[0][0]

    return predicted_price

def main():
    # دریافت داده‌ها
    print("دریافت داده‌های بیت‌کوین...")
    bitcoin_data = get_bitcoin_data()

    # آماده‌سازی داده‌ها
    TIME_STEPS = 12  # 12 ساعت قبل برای پیش‌بینی 2 ساعت بعد
    X, y, scaler = prepare_data(bitcoin_data, TIME_STEPS)

    # تقسیم داده‌ها به train و test
    train_size = int(len(X)*0.8)
    X_train, X_test = X[:train_size], X[train_size:]
    y_train, y_test = y[:train_size], y[train_size:]

    # ساخت و آموزش مدل
    print("آموزش مدل LSTM...")
    model = create_model(TIME_STEPS)
    model.fit(X_train, y_train, epochs=50, batch_size=32, validation_split=0.1, verbose=1)

    # پیش‌بینی قیمت برای 2 ساعت آینده
    current_price = bitcoin_data[-1]
    predicted_price = predict_price(model, bitcoin_data, scaler, TIME_STEPS)

    print(f"\nقیمت فعلی بیت‌کوین: ${current_price:.2f}")
    print(f"قیمت پیش‌بینی شده برای 2 ساعت آینده: ${predicted_price:.2f}")
    print(f"درصد تغییر پیش‌بینی شده: {((predicted_price - current_price)/current_price):.2f}%")

main()